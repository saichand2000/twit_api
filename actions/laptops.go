package actions

import (
	"fmt"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v5"

	// "github.com/gobuffalo/x/responder"
	"strconv"
	"twit_api/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Laptop)
// DB Table: Plural (laptops)
// Resource: Plural (Laptops)
// Path: Plural (/laptops)
// View Template Folder: Plural (/templates/laptops/)

// LaptopsResource is the resource for the Laptop model

func LaptopIndex(c buffalo.Context) error {
	// Create an array to receive laptops
	laptops := []models.Laptop{}
	//get all the todos from database
	err := models.DB.All(&laptops)
	// handle any error
	if err != nil {
		return c.Render(http.StatusOK, r.JSON(err))
	}
	//return list of todos as json
	return c.Render(http.StatusOK, r.JSON(laptops))
}

func LaptopAdd(c buffalo.Context) error {

	//get item from url query
	name := c.Param("name")
	email := c.Param("email")
	os_name := c.Param("os_name")
	asset_id, _ := strconv.Atoi(c.Param("asset_id"))

	//create new instance of laptop
	laptop := &models.Laptop{Name: name, Os_name: os_name, Asset_id: asset_id, Email: email}

	//Create a fruit without running validations
	//err := models.DB.Create(laptop)
	fmt.Println(models.DB)

	fmt.Println(laptop)
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("transaction failed")
	}
	err := tx.Create(laptop)
	fmt.Println(laptop)

	// handle error
	if err != nil {
		fmt.Println("HHHHHHHHHHHHHH")
		fmt.Println(err)
		return c.Render(http.StatusUnprocessableEntity, r.JSON(err))
	}

	//return new todo as json
	return c.Render(http.StatusOK, r.JSON(laptop))
}

func LaptopDelete(c buffalo.Context) error {
	tx := c.Value("tx").(*pop.Connection)
	laptop := &models.Laptop{}
	if err := tx.Find(laptop, c.Param("id")); err != nil {
		return c.Error(404, err)
	}
	if err := tx.Destroy(laptop); err != nil {
		//
	}

	return c.Redirect(302, "/laptops/index")
}

func LaptopShow(c buffalo.Context) error {
	// grab the id url parameter defined in app.go
	// id := c.Param("id")
	// create a variable to receive the todo
	//laptop := models.Laptop{}
	laptop := []models.Laptop{}

	// grab the todo from the database

	//-------Querying------------
	//err := models.DB.Where("os_name = ?", "windows").All(&laptop)
	//err := models.DB.Last(&laptop)
	//err := models.DB.Order("id desc").All(&laptop)
	//err := models.DB.Select("name").All(&laptop)
	//err := models.DB.Select("max(asset_id)").All(&laptop)
	//err := models.DB.RawQuery("UPDATE laptops SET os_name = ? WHERE id = ?", "linux", 4).Exec()

	err := models.DB.Where("os_name = ?", "windows").All(&laptop)
	// handle possible error
	if err != nil {
		fmt.Println(err)
		return c.Render(http.StatusOK, r.JSON(err))
	}
	fmt.Println(laptop)
	//return the data as json
	return c.Render(http.StatusOK, r.JSON(laptop))
}
